const HASH_LEN = 32;

const SBOX = [
    0xe9, 0x45, 0x73, 0x6e, 0x8d, 0xfd, 0xf4, 0x72, 0x4c, 0x99, 0x37, 0x6a, 0x12, 0xea, 0xcc, 0xc5,
    0x00, 0x4e, 0xb6, 0xc7, 0xf9, 0x20, 0x71, 0x43, 0x3b, 0x5b, 0x0c, 0x03, 0x7b, 0x85, 0x27, 0x9a,
    0x0b, 0xa0, 0x60, 0x5e, 0x7f, 0x7c, 0x47, 0xbf, 0xff, 0x86, 0x44, 0x18, 0xb8, 0x64, 0x84, 0x14,
    0x7e, 0x2e, 0xb2, 0x16, 0x26, 0x22, 0xec, 0x55, 0x6f, 0x83, 0xcf, 0x48, 0x70, 0xb7, 0xad, 0x91,
    0x88, 0xd5, 0x89, 0x02, 0xd1, 0xa3, 0x04, 0x68, 0x0f, 0xba, 0xd0, 0xde, 0x41, 0x8c, 0xa6, 0xe1,
    0x11, 0x19, 0x06, 0xf6, 0x4b, 0xb0, 0xbc, 0x15, 0xd9, 0xf3, 0xa4, 0x54, 0x2b, 0x30, 0x77, 0xa2,
    0x40, 0xda, 0x9f, 0x4d, 0xed, 0xd6, 0x8f, 0x4f, 0xa9, 0xce, 0x69, 0xcd, 0xdc, 0xb5, 0xb3, 0x81, 
    0x46, 0x6b, 0xf5, 0xae, 0xe8, 0x52, 0xfa, 0xf7, 0x61, 0x3e, 0xe6, 0x3d, 0x39, 0x56, 0x28, 0x58, 
    0xb1, 0x94, 0x51, 0x17, 0xdd, 0x7d, 0x24, 0x5f, 0x1a, 0xef, 0xa7, 0x5c, 0xbd, 0x9d, 0x36, 0xc8,
    0xe4, 0xa1, 0xc9, 0xe5, 0x31, 0x96, 0xc6, 0xe0, 0x79, 0x97, 0x59, 0x09, 0x13, 0x1c, 0xb4, 0x53,
    0x35, 0xe7, 0x0d, 0x23, 0x8e, 0xcb, 0x01, 0x66, 0x1e, 0x9b, 0x1b, 0x25, 0xc1, 0x93, 0xee, 0xeb,
    0x21, 0xc0, 0xca, 0xaf, 0x8a, 0x4a, 0x92, 0xa8, 0x6d, 0x76, 0x50, 0xbb, 0xb9, 0x1d, 0x3c, 0x10,
    0x9e, 0xe2, 0x65, 0x2d, 0x34, 0x7a, 0xc3, 0x1f, 0x5a, 0xab, 0xdb, 0x67, 0x63, 0x95, 0x49, 0x38, 
    0x2a, 0x0e, 0x33, 0xc4, 0xfe, 0x9c, 0xf2, 0x82, 0xaa, 0x08, 0x74, 0xf8, 0xdf, 0x8b, 0xd8, 0x75,
    0xc2, 0x90, 0xf0, 0xa5, 0x05, 0x0a, 0xd3, 0xe3, 0xd2, 0x62, 0x2f, 0x98, 0x80, 0xac, 0xf1, 0x3f,
    0x32, 0xbe, 0x07, 0x29, 0x78, 0x42, 0xd4, 0xfb, 0x5d, 0x2c, 0x87, 0x6c, 0xd7, 0x57, 0xfc, 0x3a,
];

const DIFFUSION = [
    0xf26cb481, 0x16a5dc92, 0x3c5ba924, 0x79b65248, 0x2fc64b18, 0x615acd29, 0xc3b59a42, 0x976b2584, 
    0x6cf281b4, 0xa51692dc, 0x5b3c24a9, 0xb6794852, 0xc62f184b, 0x5a6129cd, 0xb5c3429a, 0x6b978425, 
    0xb481f26c, 0xdc9216a5, 0xa9243c5b, 0x524879b6, 0x4b182fc6, 0xcd29615a, 0x9a42c3b5, 0x2584976b, 
    0x81b46cf2, 0x92dca516, 0x24a95b3c, 0x4852b679, 0x184bc62f, 0x29cd5a61, 0x429ab5c3, 0x84256b97
];

let megahash = (input) => {
    if(input.length > HASH_LEN) {
        throw 'Input is too large';
    }
    let data = new Uint8Array(HASH_LEN);
    input.forEach((x, i) => { data[i] = x; });
    
    for(let i = 0; i < HASH_LEN; i++) {
        data = data.map(x => SBOX[x]);
        
        {
            let data2 = new Uint8Array(HASH_LEN);
            for(let j = 0; j < HASH_LEN; j++)
                for(let k = 0; k < HASH_LEN; k++)
                    data2[j] ^= data[k] * ((DIFFUSION[j] >> k)&1);
            data = data2;
        }


    }
    return data;
};

